#
# {{ date }}
# Automatically generated by yang.
#
# Notes:
# * Most inputs get passed as a list into this template. The template has to
#   take care to correctly join the elements within these lists into a single
#   string for rendering.
#
# * Used tools and their respective paths must be specified in the rules.
#
# * Tool-specific entities like define flags (usually '-D'), include flags
#   (usually '-I'), and response file flags (usually '@') must be set here.
#

{# Internal macro definitions #}
{%- macro list2params(option, items, prefix='') -%}
{%- if items +%}
  {{ option }} ={%- for item in items +%} {{ prefix }}{{ item }}{%- endfor -%}
{%+ endif -%}
{%- endmacro -%}

{%- macro compile_build_statements(build, rule) -%}
{%- for item in build | selectattr('rule', 'equalto', rule) %}
build {{ item['object'] }}: {{ rule }} {{ item['input'] }}
  depfile = {{ item['depfile'] }}
  {{- list2params('defines', item['defines'], '-D') }}
  {{- list2params('includes', item['includes'], '-I') }}
  {{- list2params('options', item['options']) }}
{% endfor %}
{%- endmacro -%}

{%- macro link_static_build_statements(build, rule) -%}
{%- for item in build | selectattr('rule', 'equalto', rule) %}
build {{ item['output'] }}: {{ rule }} {{ item['inputs'] | join (' ') }}
  {{- list2params('options', item['options']) }}
{% endfor %}
{%- endmacro -%}

{%- macro link_executable_build_statements(build, rule) -%}
{%- for item in build | selectattr('rule', 'equalto', rule) %}
build {{ item['output'] }}: {{ rule }} {{ item['inputs'] | join(' ') }}
  {{- list2params('options', item['options']) }}
  {{- list2params('directories', item['directories'], '-L') }}
  {{- list2params('libraries', item['libraries'], '-l') }}
{% endfor %}
{%- endmacro -%}

#
# Build rules.
#
{# #}
{%- if (build | selectattr('rule', 'equalto', 'compile-object-clang')) | list %}
rule compile-object-clang
  depfile = $depfile
  deps = gcc
  command = /usr/bin/clang $defines $includes $options -MD -MT $out -MF $depfile -o $out -c $in
  description = CC $in
{% endif %}

{%- if (build | selectattr('rule', 'equalto', 'compile-object-ccache-clang')) | list %}
rule compile-object-ccache-clang
  depfile = $depfile
  deps = gcc
  command = /usr/bin/ccache /usr/bin/clang $defines $includes $options -MD -MT $out -MF $depfile -o $out -c $in
  description = CC $in
{% endif %}

{%- if build | selectattr('rule', 'equalto', 'link-executable-clang') | list %}
rule link-executable-clang
  command = /usr/bin/clang $options @$out.rsp -o $out $directories $libraries
  rspfile = $out.rsp
  rspfile_content = $in
  description = LD $out
{% endif %}

{%- if (build | selectattr('rule', 'equalto', 'compile-object-gcc')) | list %}
rule compile-object-gcc
  depfile = $depfile
  deps = gcc
  command = /usr/bin/gcc $defines $includes $options -MD -MT $out -MF $depfile -o $out -c $in
  description = CC $in
{% endif %}

{%- if (build | selectattr('rule', 'equalto', 'compile-object-ccache-gcc')) | list %}
rule compile-object-ccache-gcc
  depfile = $depfile
  deps = gcc
  command = /usr/bin/ccache /usr/bin/gcc $defines $includes $options -MD -MT $out -MF $depfile -o $out -c $in
  description = CC $in
{% endif %}

{%- if build | selectattr('rule', 'equalto', 'link-executable-gcc') | list %}
rule link-executable-gcc
  command = /usr/bin/clang $options @$out.rsp -o $out $directories $libraries
  rspfile = $out.rsp
  rspfile_content = $in
  description = LD $out
{% endif %}

{%- if build | selectattr('rule', 'equalto', 'link-static-ar') | list %}
rule link-static-ar
  command = $
    rm -f $out && $
    /usr/bin/ar qc $out $options $in && $
    /usr/bin/ranlib $out
  description = AR $out
{% endif %}

#
# Build statements
#
{# #}
{{- compile_build_statements(build, 'compile-object-clang') }}

{{- compile_build_statements(build, 'compile-object-ccache-clang') }}

{{- compile_build_statements(build, 'compile-object-gcc') }}

{{- compile_build_statements(build, 'compile-object-ccache-gcc') }}

{{- link_static_build_statements(build, 'link-static-ar') }}

{{- link_executable_build_statements(build, 'link-executable-clang') }}

{{- link_executable_build_statements(build, 'link-executable-gcc') }}

